name: Backup Supabase Database (Full + Schema)
permissions:
  contents: write

on:
  workflow_dispatch:

jobs:
  backup-db:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Add PostgreSQL Apt Repository for v17
        run: |
          sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt/ $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
          wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
          sudo apt-get update

      - name: Install PostgreSQL 17 client tools and gzip
        run: sudo apt-get install -y postgresql-client-17 gzip jq curl

      - name: Backup full DB (data + schema) compressed and schema-only
        id: backup
        env:
          DB_HOST: ${{ secrets.PROD_DB_HOST }}
          DB_PORT: ${{ secrets.PROD_DB_PORT }}
          DB_USER: ${{ secrets.PROD_DB_USER }}
          DB_PASSWORD: ${{ secrets.PROD_DB_PASSWORD }}
          DB_NAME: ${{ secrets.PROD_DB_NAME }}
        run: |
          mkdir -p Auto-Backup
          TIMESTAMP=$(TZ="America/New_York" date +"%Y-%m-%d_%I-%M-%S%p")


          # Full dump (data+schema) compressed
          PGPASSWORD=$DB_PASSWORD pg_dump \
            --host=$DB_HOST \
            --port=$DB_PORT \
            --username=$DB_USER \
            --dbname=$DB_NAME \
            --no-password | gzip > Auto-Backup/backup_${TIMESTAMP}_full.sql.gz

          # Schema-only dump (uncompressed)
          PGPASSWORD=$DB_PASSWORD pg_dump \
            --host=$DB_HOST \
            --port=$DB_PORT \
            --username=$DB_USER \
            --dbname=$DB_NAME \
            --schema-only \
            --no-password > Auto-Backup/backup_${TIMESTAMP}_schema.sql

          echo "timestamp=$TIMESTAMP" >> $GITHUB_OUTPUT

      - name: Upload full backup (compressed) to Supabase Storage via REST API
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_BACKUP_PROJECT_REF }}  # like sqwzjhoqqgaruscfczaq
          SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_BACKUP_SERVICE_ROLE_KEY }}
          TIMESTAMP: ${{ steps.backup.outputs.timestamp }}
        run: |
          FILEPATH="Auto-Backup/backup_${TIMESTAMP}_full.sql.gz"
          TARGET_PATH="backups/backup_${TIMESTAMP}/backup_full.sql.gz"
          echo "Uploading $FILEPATH to $TARGET_PATH"

          curl -X POST "https://$SUPABASE_URL.supabase.co/storage/v1/object/$TARGET_PATH" \
            -H "Authorization: Bearer $SERVICE_ROLE_KEY" \
            -H "apikey: $SERVICE_ROLE_KEY" \
            -H "Content-Type: application/octet-stream" \
            --data-binary @$FILEPATH

      - name: Upload schema-only backup to Supabase Storage via REST API
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_BACKUP_PROJECT_REF }}
          SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_BACKUP_SERVICE_ROLE_KEY }}
          TIMESTAMP: ${{ steps.backup.outputs.timestamp }}
        run: |
          FILEPATH="Auto-Backup/backup_${TIMESTAMP}_schema.sql"
          TARGET_PATH="backups/backup_${TIMESTAMP}/backup_schema_only.sql"
          echo "Uploading $FILEPATH to $TARGET_PATH"

          curl -X POST "https://$SUPABASE_URL.supabase.co/storage/v1/object/$TARGET_PATH" \
            -H "Authorization: Bearer $SERVICE_ROLE_KEY" \
            -H "apikey: $SERVICE_ROLE_KEY" \
            -H "Content-Type: application/octet-stream" \
            --data-binary @$FILEPATH

      - name: Cleanup old backups (keep latest 20)
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_BACKUP_PROJECT_REF }}
          SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_BACKUP_SERVICE_ROLE_KEY }}
        run: |
          echo "Fetching list of backup folders..."
          # List all objects under backups/
          resp=$(curl -s -X GET "https://$SUPABASE_URL.supabase.co/storage/v1/object/list/backups?limit=1000" \
            -H "Authorization: Bearer $SERVICE_ROLE_KEY" \
            -H "apikey: $SERVICE_ROLE_KEY")
      
          # Extract unique backup folder names (prefix before first slash)
          folders=$(echo "$resp" | jq -r 'map(.name) | map(split("/") | .[0]) | unique | .[]' | grep '^backup_')
      
          # Check if we got folders
          if [ -z "$folders" ]; then
            echo "No backup folders found."
            exit 0
          fi
      
          # Sort folders ascending (oldest first)
          sorted=$(echo "$folders" | sort)
      
          # Count total folders
          total=$(echo "$sorted" | wc -l)
          echo "Total backup folders: $total"
      
          # Set how many to keep
          keep=20
          delete_count=$((total - keep))
      
          if [ $delete_count -le 0 ]; then
            echo "No old backups to delete."
            exit 0
          fi
      
          echo "Deleting $delete_count oldest backups..."
      
          # Select folders to delete (oldest first)
          to_delete=$(echo "$sorted" | head -n $delete_count)
      
          for folder in $to_delete; do
            echo "Deleting backup folder: $folder"
            # List all objects under this backup folder
            objs=$(curl -s -X GET "https://$SUPABASE_URL.supabase.co/storage/v1/object/list/backups/$folder?limit=1000" \
              -H "Authorization: Bearer $SERVICE_ROLE_KEY" \
              -H "apikey: $SERVICE_ROLE_KEY" | jq -r 'map(.name) | .[]')
      
            # Delete each object
            for obj in $objs; do
              echo "Deleting object: $obj"
              curl -s -X DELETE "https://$SUPABASE_URL.supabase.co/storage/v1/object/$obj" \
                -H "Authorization: Bearer $SERVICE_ROLE_KEY" \
                -H "apikey: $SERVICE_ROLE_KEY"
            done
          done
      
          echo "Cleanup complete."
