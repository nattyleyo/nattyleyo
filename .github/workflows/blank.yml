name: Backup Supabase Database (Full + Schema)
permissions:
  contents: write

on:
  workflow_dispatch:

jobs:
  backup-db:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Add PostgreSQL Apt Repository for v17
        run: |
          sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt/ $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
          wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
          sudo apt-get update

      - name: Install PostgreSQL 17 client tools and gzip
        run: sudo apt-get install -y postgresql-client-17 gzip

      - name: Backup full DB (data + schema) compressed and schema-only
        id: backup
        env:
          DB_HOST: ${{ secrets.PROD_DB_HOST }}
          DB_PORT: ${{ secrets.PROD_DB_PORT }}
          DB_USER: ${{ secrets.PROD_DB_USER }}
          DB_PASSWORD: ${{ secrets.PROD_DB_PASSWORD }}
          DB_NAME: ${{ secrets.PROD_DB_NAME }}
        run: |
          mkdir -p Auto-Backup
          TIMESTAMP=$(date +%s)

          # Full dump (data+schema) compressed
          PGPASSWORD=$DB_PASSWORD pg_dump \
            --host=$DB_HOST \
            --port=$DB_PORT \
            --username=$DB_USER \
            --dbname=$DB_NAME \
            --no-password | gzip > Auto-Backup/backup_${TIMESTAMP}_full.sql.gz

          # Schema-only dump (uncompressed)
          PGPASSWORD=$DB_PASSWORD pg_dump \
            --host=$DB_HOST \
            --port=$DB_PORT \
            --username=$DB_USER \
            --dbname=$DB_NAME \
            --schema-only \
            --no-password > Auto-Backup/backup_${TIMESTAMP}_schema.sql

          echo "timestamp=$TIMESTAMP" >> $GITHUB_OUTPUT

      - name: Upload full backup (compressed) to Supabase Storage via REST API
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_BACKUP_PROJECT_REF }}  # like sqwzjhoqqgaruscfczaq
          SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_BACKUP_SERVICE_ROLE_KEY }}
          TIMESTAMP: ${{ steps.backup.outputs.timestamp }}
        run: |
          FILEPATH="Auto-Backup/backup_${TIMESTAMP}_full.sql.gz"
          TARGET_PATH="backups/backup_${TIMESTAMP}/backup_full.sql.gz"
          echo "Uploading $FILEPATH to $TARGET_PATH"

          curl -X POST "https://$SUPABASE_URL.supabase.co/storage/v1/object/$TARGET_PATH" \
            -H "Authorization: Bearer $SERVICE_ROLE_KEY" \
            -H "apikey: $SERVICE_ROLE_KEY" \
            -H "Content-Type: application/octet-stream" \
            --data-binary @$FILEPATH

      - name: Upload schema-only backup to Supabase Storage via REST API
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_BACKUP_PROJECT_REF }}
          SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_BACKUP_SERVICE_ROLE_KEY }}
          TIMESTAMP: ${{ steps.backup.outputs.timestamp }}
        run: |
          FILEPATH="Auto-Backup/backup_${TIMESTAMP}_schema.sql"
          TARGET_PATH="backups/backup_${TIMESTAMP}/backup_schema_only.sql"
          echo "Uploading $FILEPATH to $TARGET_PATH"

          curl -X POST "https://$SUPABASE_URL.supabase.co/storage/v1/object/$TARGET_PATH" \
            -H "Authorization: Bearer $SERVICE_ROLE_KEY" \
            -H "apikey: $SERVICE_ROLE_KEY" \
            -H "Content-Type: application/octet-stream" \
            --data-binary @$FILEPATH
