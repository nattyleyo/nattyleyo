name: Supabase Migrations
permissions:
  contents: write

on:
  workflow_dispatch:
  push:
    branches: ["main"]

jobs:
  generate-migration:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Supabase CLI
        run: |
          TMP_DIR=$(mktemp -d)
          curl -sL https://github.com/supabase/cli/releases/latest/download/supabase_linux_amd64.tar.gz -o $TMP_DIR/supabase.tar.gz
          tar -xzf $TMP_DIR/supabase.tar.gz -C $TMP_DIR
          sudo mv -f $TMP_DIR/supabase /usr/local/bin/supabase
          rm -rf $TMP_DIR

      - name: Generate incremental migration from Test DB
        run: |
          mkdir -p supabase/migrations
          TIMESTAMP=$(date +%s)
          INCREMENTAL_FILE="supabase/migrations/${TIMESTAMP}_auto.sql"
          set -o pipefail

          # Generate migration diff
          DIFF_OUTPUT=$(supabase db diff --db-url ${{ secrets.SUPABASE_TEST_DB_URL }} --use-migra)

          if [ -n "$DIFF_OUTPUT" ]; then
            # Remove references to tables that no longer exist
            CLEANED=$(echo "$DIFF_OUTPUT" \
              | sed -e '/testMig/d' \
              | sed -e 's/DROP TABLE /DROP TABLE IF EXISTS /g' \
              | sed -e 's/DROP INDEX /DROP INDEX IF EXISTS /g' \
              | sed -e 's/DROP CONSTRAINT /ALTER TABLE IF EXISTS /g' \
              | sed -e 's/CREATE TABLE /CREATE TABLE IF NOT EXISTS /g' \
              | sed -e 's/ALTER TABLE /ALTER TABLE IF EXISTS /g')
            
            echo "$CLEANED" > "$INCREMENTAL_FILE"
            echo "Generated safe migration: $INCREMENTAL_FILE"
            echo "INCREMENTAL_FILE=$INCREMENTAL_FILE" >> $GITHUB_ENV
          else
            echo "No migration changes detected. Skipping commit."
            echo "INCREMENTAL_FILE=" >> $GITHUB_ENV
          fi

      - name: Commit and push incremental migration safely
        if: env.INCREMENTAL_FILE != ''
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add "$INCREMENTAL_FILE"
          git commit -m "chore: add incremental migration $(date +'%Y-%m-%d %H:%M:%S')" || echo "No changes to commit"
          git pull --rebase https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git HEAD
          git push https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git HEAD:${GITHUB_REF#refs/heads/}

  deploy-to-prod:
    needs: generate-migration
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout latest repo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Pull latest changes
        run: |
          git fetch origin main
          git reset --hard origin/main

      - name: Install Supabase CLI
        run: |
          TMP_DIR=$(mktemp -d)
          curl -sL https://github.com/supabase/cli/releases/latest/download/supabase_linux_amd64.tar.gz -o $TMP_DIR/supabase.tar.gz
          tar -xzf $TMP_DIR/supabase.tar.gz -C $TMP_DIR
          sudo mv -f $TMP_DIR/supabase /usr/local/bin/supabase
          rm -rf $TMP_DIR

      - name: Apply migrations to Prod safely
        run: |
          mkdir -p supabase/migrations supabase/baselines

          # Check if Prod has migrations table
          EXISTS=$(psql ${{ secrets.SUPABASE_PROD_DB_URL }} -tAc "SELECT 1 FROM information_schema.tables WHERE table_name='supabase_migrations';")

          if [ "$EXISTS" != "1" ]; then
            echo "Empty Prod detected. Creating full baseline from Test DB..."
            TIMESTAMP=$(date +%s)
            BASELINE_FILE="supabase/baselines/${TIMESTAMP}_baseline.sql"

            supabase db dump --db-url ${{ secrets.SUPABASE_TEST_DB_URL }} > "$BASELINE_FILE"
            psql ${{ secrets.SUPABASE_PROD_DB_URL }} < "$BASELINE_FILE"
          fi

          echo "Applying incremental migrations sequentially..."
          for MIG in supabase/migrations/*.sql; do
            echo "Applying $MIG..."
            psql ${{ secrets.SUPABASE_PROD_DB_URL }} -f "$MIG" || echo "Skipped $MIG due to error (already applied or missing object)"
          done

      - name: Deploy Supabase Edge Functions
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_PROD_SERVICE_ROLE_KEY }}
        run: |
          FUNCTIONS_DIR="supabase/functions"
          for FUNC in "$FUNCTIONS_DIR"/*; do
            if [ -d "$FUNC" ]; then
              NAME=$(basename "$FUNC")
              echo "Deploying Edge Function: $NAME"
              supabase functions deploy "$NAME" \
                --project-ref ${{ secrets.SUPABASE_PROD_PROJECT_REF }} \
                --yes
            fi
          done
